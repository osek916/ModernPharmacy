@page "/article/{title}"
@using System.Text
@inject IArticleService ArticleService

<PageTitle>Atricle Content</PageTitle>
@if(ArticleService.Article != null)
{   
    <img class="rounded main-img-article border border-5" 
         src=@ArticleService.Article.ImagePath />

    <div class="title"><span>@ArticleService.Article.Title</span></div>
    <div>
        <div class="author">@($"Created by {ArticleService.Article.CreatedById} {ArticleService.Article.CreatedDate}")</div>
        <div class="tags">
            <p>
                @((string.IsNullOrEmpty(@FullTagsString)) ? "Loading": @FullTagsString)
            </p>                      
        </div>
    </div>
    <div class="text-container"><p>@ArticleService.Article.Text</p></div>
    
}
else
{
    <p>Loading</p>
}

@*
    <div class="title"><span>@((ArticleService.Article != null) ? "" : ArticleService.Article.Title)</span></div>

    <img class="rounded main-img-article border border-5" 
         src="@((ArticleService.Article == null) ? "" : ArticleService.Article.ImagePath )" />
*@

@code {
    [Parameter]
    public string? Title { get; set; }
    public string FullTagsString { get; set; }

    async protected override Task OnParametersSetAsync()
    {
        await ArticleService.GetArticleByTitleAsync(Title);
        await SetFullTagsString();
    }

    async private Task SetFullTagsString()
    {
        StringBuilder sb = new StringBuilder("Tags: ");
        for (int i = 0; i < ArticleService.Article.Tags.Count; i++)
        {
            if(i == ArticleService.Article.Tags.Count - 1)
            {
                sb.Append(ArticleService.Article.Tags[i].Name + ".");
            }
            else
            {
                sb.Append(ArticleService.Article.Tags[i].Name + ", ");
            }
        }
        FullTagsString = sb.ToString();
    }

    
}
