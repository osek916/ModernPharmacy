// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModernPharmacy.Server.Data;

#nullable disable

namespace ModernPharmacy.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230211150751_EditedProductState")]
    partial class EditedProductState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DrugSubstance", b =>
                {
                    b.Property<int>("DrugsId")
                        .HasColumnType("int");

                    b.Property<int>("SubstancesId")
                        .HasColumnType("int");

                    b.HasKey("DrugsId", "SubstancesId");

                    b.HasIndex("SubstancesId");

                    b.ToTable("DrugSubstance");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.DifferentProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DifferentProducts");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LumpSumDrug")
                        .HasColumnType("bit");

                    b.Property<int?>("MilligramsForTheWholeDrug")
                        .HasColumnType("int");

                    b.Property<int?>("MilligramsPerTablets")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfTablets")
                        .HasColumnType("int");

                    b.Property<bool>("PrescriptionRequired")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.DrugSubstance", b =>
                {
                    b.Property<int>("SubstanceId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("DrugSubstanceId")
                        .HasColumnType("int");

                    b.HasKey("SubstanceId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugSubstances");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPrescriptionDrugs")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DifferentProductId")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProposedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DifferentProductId")
                        .IsUnique()
                        .HasFilter("[DifferentProductId] IS NOT NULL");

                    b.HasIndex("DrugId")
                        .IsUnique()
                        .HasFilter("[DrugId] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.ProductState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmountOfProducts")
                        .HasColumnType("int");

                    b.Property<int>("HowMuchHasBeenSold")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceForOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStates");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.SubstanceSubstanceCategory", b =>
                {
                    b.Property<int>("SubstanceId")
                        .HasColumnType("int");

                    b.Property<int>("SubstanceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SubstanceSubstanceCategoryId")
                        .HasColumnType("int");

                    b.HasKey("SubstanceId", "SubstanceCategoryId");

                    b.HasIndex("SubstanceCategoryId");

                    b.ToTable("SubstanceSubstanceCategories");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Substance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Substances");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.SubstanceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubstanceCategories");
                });

            modelBuilder.Entity("SubstanceSubstanceCategory", b =>
                {
                    b.Property<int>("SubstanceCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("SubstancesId")
                        .HasColumnType("int");

                    b.HasKey("SubstanceCategoriesId", "SubstancesId");

                    b.HasIndex("SubstancesId");

                    b.ToTable("SubstanceSubstanceCategory");
                });

            modelBuilder.Entity("DrugSubstance", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.Entities.Drug", null)
                        .WithMany()
                        .HasForeignKey("DrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModernPharmacy.Shared.Substance", null)
                        .WithMany()
                        .HasForeignKey("SubstancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Address", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.Entities.Pharmacy", "Pharmacy")
                        .WithOne("Address")
                        .HasForeignKey("ModernPharmacy.Shared.Entities.Address", "PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.DrugSubstance", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.Entities.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModernPharmacy.Shared.Substance", "Substance")
                        .WithMany()
                        .HasForeignKey("SubstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Substance");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Product", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.Entities.DifferentProduct", "DifferentProduct")
                        .WithOne("Product")
                        .HasForeignKey("ModernPharmacy.Shared.Entities.Product", "DifferentProductId");

                    b.HasOne("ModernPharmacy.Shared.Entities.Drug", "Drug")
                        .WithOne("Product")
                        .HasForeignKey("ModernPharmacy.Shared.Entities.Product", "DrugId");

                    b.Navigation("DifferentProduct");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.ProductState", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModernPharmacy.Shared.Entities.Product", "Product")
                        .WithMany("ProductStates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.SubstanceSubstanceCategory", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.SubstanceCategory", "SubstanceCategory")
                        .WithMany()
                        .HasForeignKey("SubstanceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModernPharmacy.Shared.Substance", "Substance")
                        .WithMany()
                        .HasForeignKey("SubstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Substance");

                    b.Navigation("SubstanceCategory");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Tag", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.Entities.Article", null)
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId");
                });

            modelBuilder.Entity("SubstanceSubstanceCategory", b =>
                {
                    b.HasOne("ModernPharmacy.Shared.SubstanceCategory", null)
                        .WithMany()
                        .HasForeignKey("SubstanceCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModernPharmacy.Shared.Substance", null)
                        .WithMany()
                        .HasForeignKey("SubstancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Article", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.DifferentProduct", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Drug", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Pharmacy", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ModernPharmacy.Shared.Entities.Product", b =>
                {
                    b.Navigation("ProductStates");
                });
#pragma warning restore 612, 618
        }
    }
}
